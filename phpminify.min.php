<?php /* https://github.com/basselin/php-minify */
 class PhpMinify { protected $options = array( 'source' => 'module/', 'target' => 'modulemin/', 'banner' => '', 'extensions' => array('inc', 'php', 'phtml'), 'exclusions' => array('md'), ); public function __construct(array $options = array()) { $this->options = array_merge($this->options, $options); } public function getSource() { return $this->options['source']; } public function setSource($source) { $this->options['source'] = $source; return $this; } public function getTarget() { return $this->options['target']; } public function setTarget($target) { $this->options['target'] = $target; return $this; } public function getBanner() { return $this->options['banner']; } public function setBanner($banner) { $this->options['banner'] = $banner; return $this; } public function getExtensions() { return $this->options['extensions']; } public function setExtensions(array $extensions) { $this->options['extensions'] = $extensions; return $this; } public function getExclusions() { return $this->options['exclusions']; } public function setExclusions(array $extensions) { $this->options['exclusions'] = $extensions; return $this; } public function minify($string) { $string = php_strip_whitespace($string); if ($this->getBanner()) { $string = preg_replace('/^<\?php/', '<?php ' . $this->getBanner(), $string); } return $string; } public function run() { $return = array(); $iterator = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($this->getSource()), RecursiveIteratorIterator::CHILD_FIRST); foreach ($iterator as $key => $value) { if (in_array($value->getFilename(), array('..', '.DS_Store'))) { continue; } $targetPathname = preg_replace('/^' . preg_quote($this->getSource(), '/') . '/', $this->getTarget(), $value->getPathname()); if ($value->isDir()) { if ($value->getBasename() == '.') { $dirname = dirname($targetPathname); if (!is_dir($dirname)) { mkdir($dirname); } $return[$value->getPath()] = $dirname; } continue; } if ($value->isFile() && !in_array(strtolower($value->getExtension()), $this->getExclusions())) { if (in_array(strtolower($value->getExtension()), $this->getExtensions())) { file_put_contents($targetPathname, $this->minify($value->getPathname())); } else { copy($value->getPathname(), $targetPathname); } $return[$value->getPathname()] = $targetPathname; } } return $return; } } 